# /*******************************************************************************
#  Copyright (C) 2021 Xilinx, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# *******************************************************************************/

[connectivity]
# Define number of kernels and their name
nk=ccl_offload:3:ccl_offload_0.ccl_offload_1.ccl_offload_2
nk=network_krnl:3:network_krnl_0.network_krnl_1.network_krnl_2
nk=vnx_loopback:3:lb_udp_0.lb_udp_1.lb_udp_2
nk=vnx_loopback:3:lb_tcp_0.lb_tcp_1.lb_tcp_2
nk=vnx_loopback:3:lb_str_0.lb_str_1.lb_str_2
nk=tri_benchmark_control:1:bench_control
nk=reduce_arith:3:external_reduce_arith_0.external_reduce_arith_1.external_reduce_arith_2

# Kernels Foorplaning
slr=lb_udp_0:SLR0
slr=lb_tcp_0:SLR0
slr=lb_str_0:SLR0
slr=external_reduce_arith_0:SLR0
slr=ccl_offload_0:SLR0
slr=network_krnl_0:SLR0
sp=ccl_offload_0.m_axi_0:HBM[0:5]
sp=ccl_offload_0.m_axi_1:HBM[0:5]
sp=ccl_offload_0.m_axi_2:HBM[0:5]
# Kernels Foorplaning
slr=lb_udp_1:SLR1
slr=lb_tcp_1:SLR1
slr=lb_str_1:SLR1
slr=external_reduce_arith_1:SLR1
slr=ccl_offload_1:SLR1
slr=network_krnl_1:SLR1
sp=ccl_offload_1.m_axi_0:HBM[6:11]
sp=ccl_offload_1.m_axi_1:HBM[6:11]
sp=ccl_offload_1.m_axi_2:HBM[6:11]

# Kernels Foorplaning
slr=lb_udp_2:SLR2
slr=lb_tcp_2:SLR2
slr=lb_str_2:SLR2
slr=external_reduce_arith_2:SLR2
slr=ccl_offload_2:SLR2
slr=network_krnl_2:SLR2
sp=ccl_offload_2.m_axi_0:HBM[12:17]
sp=ccl_offload_2.m_axi_1:HBM[12:17]
sp=ccl_offload_2.m_axi_2:HBM[12:17]

# Connect CCL Offload kernel to TCP Network Kernel
sc=network_krnl_0.m_axis_tcp_port_status:ccl_offload_0.s_axis_tcp_port_status
sc=network_krnl_0.m_axis_tcp_open_status:ccl_offload_0.s_axis_tcp_open_status
sc=network_krnl_0.m_axis_tcp_notification:ccl_offload_0.s_axis_tcp_notification
sc=network_krnl_0.m_axis_tcp_rx_meta:ccl_offload_0.s_axis_tcp_rx_meta
sc=network_krnl_0.m_axis_tcp_rx_data:ccl_offload_0.s_axis_tcp_rx_data
sc=network_krnl_0.m_axis_tcp_tx_status:ccl_offload_0.s_axis_tcp_tx_status
sc=ccl_offload_0.m_axis_tcp_listen_port:network_krnl_0.s_axis_tcp_listen_port
sc=ccl_offload_0.m_axis_tcp_open_connection:network_krnl_0.s_axis_tcp_open_connection
#sc=ccl_offload_0.m_axis_tcp_close_connection:network_krnl_0.s_axis_tcp_close_connection
sc=ccl_offload_0.m_axis_tcp_read_pkg:network_krnl_0.s_axis_tcp_read_pkg
sc=ccl_offload_0.m_axis_tcp_tx_meta:network_krnl_0.s_axis_tcp_tx_meta
sc=ccl_offload_0.m_axis_tcp_tx_data:network_krnl_0.s_axis_tcp_tx_data

sc=network_krnl_1.m_axis_tcp_port_status:ccl_offload_1.s_axis_tcp_port_status
sc=network_krnl_1.m_axis_tcp_open_status:ccl_offload_1.s_axis_tcp_open_status
sc=network_krnl_1.m_axis_tcp_notification:ccl_offload_1.s_axis_tcp_notification
sc=network_krnl_1.m_axis_tcp_rx_meta:ccl_offload_1.s_axis_tcp_rx_meta
sc=network_krnl_1.m_axis_tcp_rx_data:ccl_offload_1.s_axis_tcp_rx_data
sc=network_krnl_1.m_axis_tcp_tx_status:ccl_offload_1.s_axis_tcp_tx_status
sc=ccl_offload_1.m_axis_tcp_listen_port:network_krnl_1.s_axis_tcp_listen_port
sc=ccl_offload_1.m_axis_tcp_open_connection:network_krnl_1.s_axis_tcp_open_connection
#sc=ccl_offload_1.m_axis_tcp_close_connection:network_krnl_1.s_axis_tcp_close_connection
sc=ccl_offload_1.m_axis_tcp_read_pkg:network_krnl_1.s_axis_tcp_read_pkg
sc=ccl_offload_1.m_axis_tcp_tx_meta:network_krnl_1.s_axis_tcp_tx_meta
sc=ccl_offload_1.m_axis_tcp_tx_data:network_krnl_1.s_axis_tcp_tx_data

sc=network_krnl_2.m_axis_tcp_port_status:ccl_offload_2.s_axis_tcp_port_status
sc=network_krnl_2.m_axis_tcp_open_status:ccl_offload_2.s_axis_tcp_open_status
sc=network_krnl_2.m_axis_tcp_notification:ccl_offload_2.s_axis_tcp_notification
sc=network_krnl_2.m_axis_tcp_rx_meta:ccl_offload_2.s_axis_tcp_rx_meta
sc=network_krnl_2.m_axis_tcp_rx_data:ccl_offload_2.s_axis_tcp_rx_data
sc=network_krnl_2.m_axis_tcp_tx_status:ccl_offload_2.s_axis_tcp_tx_status
sc=ccl_offload_2.m_axis_tcp_listen_port:network_krnl_2.s_axis_tcp_listen_port
sc=ccl_offload_2.m_axis_tcp_open_connection:network_krnl_2.s_axis_tcp_open_connection
#sc=ccl_offload_2.m_axis_tcp_close_connection:network_krnl_2.s_axis_tcp_close_connection
sc=ccl_offload_2.m_axis_tcp_read_pkg:network_krnl_2.s_axis_tcp_read_pkg
sc=ccl_offload_2.m_axis_tcp_tx_meta:network_krnl_2.s_axis_tcp_tx_meta
sc=ccl_offload_2.m_axis_tcp_tx_data:network_krnl_2.s_axis_tcp_tx_data

# Connect each CCL hls_control and hls_control_result stream in loopback
# temporary
stream_connect=ccl_offload_0.hls_control_result:bench_control.sts_0
stream_connect=bench_control.cmd_0:ccl_offload_0.hls_control

stream_connect=ccl_offload_1.hls_control_result:bench_control.sts_1
stream_connect=bench_control.cmd_1:ccl_offload_1.hls_control

stream_connect=ccl_offload_2.hls_control_result:bench_control.sts_2
stream_connect=bench_control.cmd_2:ccl_offload_2.hls_control

# Connect each CCL network_tcp kernel in loopback
# this is temporary, the connections will be broken and 
# a switch inserted after BD creation
stream_connect=network_krnl_0.net_tx:lb_tcp_0.in
stream_connect=lb_tcp_0.out:network_krnl_0.net_rx

stream_connect=network_krnl_1.net_tx:lb_tcp_1.in
stream_connect=lb_tcp_1.out:network_krnl_1.net_rx

stream_connect=network_krnl_2.net_tx:lb_tcp_2.in
stream_connect=lb_tcp_2.out:network_krnl_2.net_rx

# Connect each CCL Offload udp kernel in loopback
# this is temporary, the connections will be broken and 
# a switch inserted after BD creation
stream_connect=ccl_offload_0.m_axis_udp_tx_data:lb_udp_0.in
stream_connect=lb_udp_0.out:ccl_offload_0.s_axis_udp_rx_data

stream_connect=ccl_offload_1.m_axis_udp_tx_data:lb_udp_1.in
stream_connect=lb_udp_1.out:ccl_offload_1.s_axis_udp_rx_data

stream_connect=ccl_offload_2.m_axis_udp_tx_data:lb_udp_2.in
stream_connect=lb_udp_2.out:ccl_offload_2.s_axis_udp_rx_data

# Connect external reduce_arithmetic units

stream_connect=external_reduce_arith_0.out_r:ccl_offload_0.s_axis_arith_res
stream_connect=ccl_offload_0.m_axis_arith_op0:external_reduce_arith_0.in1
stream_connect=ccl_offload_0.m_axis_arith_op1:external_reduce_arith_0.in2

stream_connect=external_reduce_arith_1.out_r:ccl_offload_1.s_axis_arith_res
stream_connect=ccl_offload_1.m_axis_arith_op0:external_reduce_arith_1.in1
stream_connect=ccl_offload_1.m_axis_arith_op1:external_reduce_arith_1.in2

stream_connect=external_reduce_arith_2.out_r:ccl_offload_2.s_axis_arith_res
stream_connect=ccl_offload_2.m_axis_arith_op0:external_reduce_arith_2.in1
stream_connect=ccl_offload_2.m_axis_arith_op1:external_reduce_arith_2.in2

##streaming kernel connection
stream_connect=ccl_offload_0.m_axis_krnl:lb_str_0.in
stream_connect=ccl_offload_1.m_axis_krnl:lb_str_1.in
stream_connect=ccl_offload_2.m_axis_krnl:lb_str_2.in

stream_connect=lb_str_0.out:ccl_offload_0.s_axis_krnl
stream_connect=lb_str_1.out:ccl_offload_1.s_axis_krnl
stream_connect=lb_str_2.out:ccl_offload_2.s_axis_krnl

[profile]
data=all:all:all           # Monitor data on all kernels and CUs
stall=all:all              # Monitor stalls for all CUs of all kernels
exec=all:all               # Monitor execution times for all CUs